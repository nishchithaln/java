
package bank;
import javax.swing.*;

import login.logininfo;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.InputMismatchException;
import java.util.Scanner;

//import login.logininfo;
// using interface
interface CreateAcc
{
	void accNoGenerator();
	void input();
	void display();
}

class SavingsAccount implements CreateAcc
{
		Scanner sc = new Scanner(System.in);
		String name;
		long mobile;
		String mail;
		long adhar;
		String pan;
		int accno;
		String address;
		String cname;
		double csal;
		String acc;
		String cadd;
		String ifsc="MYBANK1920";
		StringBuilder sb=new StringBuilder(ifsc);
		String sifsc=ifsc.substring(6,10);
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
	public void accNoGenerator()
	{
		long min=1000000001;
		long max=2000000001;
        accno = (int)(Math.random() * (max - min + 1) + min);
       acc=sifsc+accno;
	}
    public void input()
    {
    	try
    	{
    	System.out.println("Enter Your full Name:");
    	name=sc.next();
    	this.setName(name);
    	System.out.println("Enter MobileNo:");
    	mobile=sc.nextLong();
    	System.out.println("Enter Your MailID:");
    	mail=sc.next();
    	System.out.println("Enter Adhar Number:");
    	adhar=sc.nextLong();
    	System.out.println("Enter PAN Number:");
    	pan=sc.next();	
    	System.out.println("Enter Current Address:");
    	address=sc.next();
    	}
    	catch(Exception e)
    	{
    		System.out.println("please input correct format");
    	}
    }
	public void display()
	{
		System.out.println("Account Type: SAVINGS");
		System.out.println("Account NUmber:"+sifsc+accno);
		System.out.println("Account Name:"+getName());
		System.out.println("Mobile:"+mobile);
		System.out.println("Mail ID:"+mail);
		System.out.println("Adhar Number:"+adhar);
		System.out.println("PAN Number:"+pan);
		System.out.println("Address:"+address);
	}
		
}
class SalaryAccount extends SavingsAccount implements CreateAcc
{
	public void accNoGenerator()
	{
		long min=1000000001;
		long max=2000000001;
        accno = (int)(Math.random() * (max - min + 1) + min);
	}
	public void input()
    {
		try {
		System.out.println("ENTER PERSONAL DETAILS:");
    	System.out.println("Enter Your full Name:");
    	name=sc.next();
    	this.setName(name);
    	System.out.println("Enter MobileNo:");
    	mobile=sc.nextLong();
    	System.out.println("Enter Your MailID:");
    	mail=sc.next();
    	System.out.println("Enter Adhar Number:");
    	adhar=sc.nextLong();
    	System.out.println("Enter PAN Number:");
    	pan=sc.next();	
    	System.out.println("Enter Current Address:");
    	address=sc.next();
    	System.out.println("ENTER COMPANY DETAILS:");
    	System.out.println("Enter Company Name:");
    	cname=sc.next();
    	System.out.println("Enter Monthly Salary:");
    	csal=sc.nextDouble();
    	System.out.println("Enter Company Address");
    	cadd=sc.next();
		}
    	catch(InputMismatchException ime)
    	{
    		System.out.println("please input correct format");
    	}
    }
	public void display()
	{
		System.out.println("Account Type: SALARY ACCOUNT");
		System.out.println("Account NUmber:"+sifsc+accno);
		System.out.println("Account holder Name:"+getName());
		System.out.println("Mobile:"+mobile);
		System.out.println("Mail ID:"+mail);
		System.out.println("Adhar Number:"+adhar);
		System.out.println("PAN Number:"+pan);
		System.out.println("Address:"+address);
		System.out.println("Company Details:");
		System.out.println("Company Name:"+cname+"\nCompany address:"+cadd);
	}
	
}
//using abstraction
abstract class Account 
{
   	double balance;
	double interest;
	public double getInterest() {
		return interest;
	}
	public void setInterest(double interest) {
		this.interest = interest;
	}
	public double getBalance() {
		return balance;
	}
	public void setBalance(double balance) {
		this.balance = balance;
	}
	abstract public void deposit(double amount);
	 abstract public void withdraw(double amount);
	 abstract public void display();
}

class Savings<T,U> extends Account
{
	Savings()//Default Constructor
	{
		super();
		balance = 0;
		interest = 0;
	}

	Savings(double initialBalance, double initialInterest)//parameterized constructor
	{
		super();
		balance = initialBalance;
		interest = initialInterest;
	}

	public synchronized void withdraw(double amount)
	{
		if(amount<=balance)
		{
			balance = balance - amount;
		}
		else
		{
			System.out.println("Insufficient funds");
			try{
				wait();
				}
			catch(Exception e)
			{
				
			}
		}
	}
	public synchronized void deposit(double amount)
	 {
		 balance = balance + amount;
		 notify();
	 }
	
	public synchronized void display()//function or method overloading
	{
		System.out.println("Current Balance: "+this.getBalance());
		
	}
	public void display(String date)////method overloading
	{
		System.out.println(date+"\nyour balance is:"+this.getBalance());
	
	}

}

class Transaction<T> implements Runnable
{	
	ArrayList<String> al=new ArrayList<String>();
    String strDate;
    String dep;
	
	public void dipTrans(double damount)
	{
		Date d1=new Date();
		strDate = String.format("%tY-%<tm-%<td %<tH:%<tM:%<tS", d1);
		dep="deposited:"+damount+" date: "+strDate;
		al.add(dep);
	}
	
	public void withTrans(double wamount)
	{
		Date d2=new Date();
		strDate = String.format("%tY-%<tm-%<td %<tH:%<tM:%<tS", d2);
		String wit="withdraw:"+wamount+" date: "+strDate;
		al.add(wit);
	}
	
	public void run()
	{
		try
		{
		for(Object p:al)
			{
			System.out.println(p);
			}
		}
		catch(IndexOutOfBoundsException ioe)
		{
			System.out.println("Index out of bounds exception occur");
		}
	}
	
	
}

class Loan
{
	
	float pamount;//principle amount
	int tperiod;//tenure
	static float roi;//static variable
	float mi;//monthly interest
	float ta;//total amount you paid444
	DecimalFormat dc=new DecimalFormat("#");
	float ti;//total interest
	String dmi=null;
	String dti=null;
	String dta=null;
	static //static block
	{
		roi=10.0f;
	}
	
	void input()
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the principle amount");
		pamount=sc.nextFloat();
		System.out.println("Enter the time period");
		tperiod=sc.nextInt();
	}
	static void disp()
	{
		System.out.println("the rate of interst is:"+roi);
	}

	public void compute()
	{
		
		roi=roi/(12*100);
		tperiod=tperiod*12;
		mi=(pamount*roi*(float)Math.pow(1+roi,tperiod))/((float)Math.pow(1+roi,tperiod)-1);
		dmi=dc.format(mi);
		ta=mi*tperiod;
		dta=dc.format(ta);
		ti=ta-pamount;
		dti=dc.format(ti);
	}
	void display()
	{
		System.out.println("Monthly EMI:"+dmi);
		System.out.println("Total Interst:"+dti);
		System.out.println("Total Loan Amount:"+dta);
	}
	static class display
	{
		void printMessage()
		{
			System.out.println("excutive manager will contact you shortly");
		}
	}
}

public class BankApp 
{
	
	static Connection con=null;
	static  Statement stmt=null;
	static ResultSet rst=null;
	// static String qry="select * from loan";
	static  PreparedStatement pstmt=null;
	
	public static void main(String[] args)
	{
		System.out.println("main invoked with :"+args.length+" ARGUMENTS");
		for(String arg:args)
		{
			System.out.println(arg);
		}
		logininfo frame = new logininfo();
	    frame.setTitle("Login Form");
        frame.setVisible(true);
        frame.setBounds(10, 10, 370, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setResizable(false);

		 try {
			 Class.forName("oracle.jdbc.OracleDriver");
				System.out.println("driver successfully loaded");
				con= DriverManager.getConnection("jdbc:oracle:thin:@//localhost:1521/XE", "system", "system");
				System.out.println("Connection Established");
			
			
		
			
		 }
			
			catch (ClassNotFoundException | SQLException e)
			{
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		 
		   
		    
		
		try
		{
			

		String type = null;
		SavingsAccount sav=new SavingsAccount();
		SalaryAccount sal=new SalaryAccount();
		Savings<Integer, Double> s=new Savings<Integer, Double>(0,0.10); 
		Transaction t=new Transaction();
		Loan l1=new Loan();
		Thread t1=new Thread(t);//runnable interface
		Loan.display ld=new Loan.display();
		Date date = new Date();
		String strDate = String.format("%tY-%<tm-%<td %<tH:%<tM:%<tS", date);
		Scanner sc=new Scanner(System.in);
		

		
		boolean repeat=true;
		do {
		System.out.print("---------------------------------------------\n               MENU           \n---------------------------------------------\n");
		System.out.println("1.Create Account\n2.Account Information\n3.Cash Deposit\n4.Cash withdrawl\n5.last transactions:\n6.check balance\n7.loan\n8.Loan History \n9.logout\n---------------------------------------------");
		int choice=sc.nextInt();
		
		switch(choice)
		{
		case 1:
			System.out.println("Create a new account");
			System.out.println("enter choice:\na.savings account\nb.salary account");
			char choice1=sc.next().charAt(0);
			switch(choice1)
			{
			case 'a':
				System.out.println("Create a new savings account");
				type="savings";
				sav.accNoGenerator();
				sav.input();
				pstmt=con.prepareStatement("INSERT INTO SAVACC VALUES(?,?,?,?,?,?,?)");
				pstmt.setString(1, sav.name);
				pstmt.setLong(2, sav.mobile);
				pstmt.setString(3, sav.mail);
				pstmt.setLong(4, sav.adhar);
				pstmt.setString(5, sav.address);
				pstmt.setString(6, sav.pan);
				pstmt.setInt(7, sav.accno);
				System.out.println("inserted");
				pstmt.executeUpdate();
				System.out.println("updated");
		        break;
			case 'b':
				System.out.println("Create a new salary account");
				type="salary";
				sal.accNoGenerator();
				sal.input();
		        break;
			}
			break;
		case 2:
			System.out.println("Account Informtion:");
			if(type.equalsIgnoreCase("savings"))
			{
				sav.display();
			}
			else
			{
				sal.display();
			}
			break;
			
		case 3:	
			System.out.println("Enter deposit amount");
			double damount=sc.nextDouble();
			System.out.println("hello "+sav.getName()+",\nAccoont Number:"+sav.sifsc+sav.accno);
			new Thread()
			{
			public void run()
			{
			s.deposit(damount);
			}
			}.start();
			t.dipTrans(damount);
			pstmt=con.prepareStatement("INSERT INTO TRANS VALUES(?,?,?)");
			pstmt.setString(1, t.strDate);
			pstmt.setDouble(2,damount);
			String ty="Deposited";
			pstmt.setString(3,ty);
			pstmt.executeUpdate();
			s.display();
			break;
		case 4:
			System.out.println("Cash Withdrawl");
			double wamount=sc.nextDouble();
			System.out.println("hello, "+sav.name);
			new Thread()
			{
			public void run()
			{
			s.withdraw(wamount);
			}
			}.start();
			t.withTrans(wamount);
			pstmt=con.prepareStatement("INSERT INTO TRANS VALUES(?,?,?)");
			pstmt.setString(1, t.strDate);
			pstmt.setDouble(2,wamount);
			String tyw="withdraw";
			pstmt.setString(3,tyw);
			pstmt.executeUpdate();
			s.display();
			break;
		case 5:
			stmt=con.createStatement();
			rst=stmt.executeQuery("select*from TRANS");
			System.out.println("Date&Time           |Amount           |Type");	
			while(rst.next())
			{
				String s1=rst.getString(1);
				Double d1=rst.getDouble(2);
				String s2=rst.getString(3);
				System.out.println(s1+"              |"+d1+"             |"+s2);
			} 
		
			//t1.start();
			break;
		case 6:
			System.out.println("hello "+sav.getName()+",\nAccoont Number:"+sav.sifsc+sav.accno);
			s.display(strDate);
			break;
		case 7:
			System.out.println("Loan Application");
			l1.input();
			pstmt=con.prepareStatement("INSERT INTO LOAN VALUES(?,?,?,?,?)");
			l1.compute();
			pstmt.setFloat(1, l1.roi);
			pstmt.setFloat(2, l1.tperiod);
			pstmt.setString(3, l1.dmi);
			pstmt.setString(4, l1.dta);
			pstmt.setString(5, l1.dti);
			System.out.println("inserted");
			int row=pstmt.executeUpdate();
			System.out.println("updated");
		    System.out.println(row);
			
			if(15000<=s.balance)
			{
				System.out.println("You Eligible To Take A Loan");
				l1.display();
				ld.printMessage();
			}
			else
			{
				System.out.println("You Are Not Eligible To Take A Loan");
			}
			
			break;
		case 8:
			System.out.println("Loan History");
			stmt=con.createStatement();
			rst=stmt.executeQuery("Select * from loan");
			System.out.println("|ROI		|Time Period	|Monthly Interest|Total Amount	|Total Interest");
			while(rst.next())
			{
				float roi=rst.getFloat(1);
				float tp=rst.getFloat(2);
				String dmi=rst.getString(3);
				String dta=rst.getString(4);rd
				String dti=rst.getString(5);
				System.out.println(roi+"	|"+tp+"		|"+dmi+"		|"+dta+"		|"+dti);
			}
			break;
		case 9:
			System.out.println("Thank You "+sav.name);
			repeat=false;
			break;
		default:
				System.out.println("Invalid input");
				break;
				
		}
		}while(repeat);
		}
		catch(Exception e)//generic exeption
		{
			
		}
			
	}
		

}
//package
package login;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class logininfo extends JFrame implements ActionListener {

    Container container = getContentPane();
    JLabel userLabel = new JLabel("USERNAME");
    JLabel passwordLabel = new JLabel("PASSWORD");
    JTextField userTextField = new JTextField();
    JPasswordField passwordField = new JPasswordField();
    JButton loginButton = new JButton("LOGIN");
    JButton resetButton = new JButton("RESET");
    JCheckBox showPassword = new JCheckBox("Show Password");


    public logininfo() {
        setLayoutManager();
        setLocationAndSize();
        addComponentsToContainer();
        addActionEvent();

    }

    public void setLayoutManager() {
        container.setLayout(null);
    }

    public void setLocationAndSize() {
        userLabel.setBounds(50, 150, 100, 30);
        passwordLabel.setBounds(50, 220, 100, 30);
        userTextField.setBounds(150, 150, 150, 30);
        passwordField.setBounds(150, 220, 150, 30);
        showPassword.setBounds(150, 250, 150, 30);
        loginButton.setBounds(50, 300, 100, 30);
        resetButton.setBounds(200, 300, 100, 30);


    }

    public void addComponentsToContainer() {
        container.add(userLabel);
        container.add(passwordLabel);
        container.add(userTextField);
        container.add(passwordField);
        container.add(showPassword);
        container.add(loginButton);
        container.add(resetButton);
    }

    public void addActionEvent() {
        loginButton.addActionListener(this);
        resetButton.addActionListener(this);
        showPassword.addActionListener(this);
    }


    @Override
    public void actionPerformed(ActionEvent e) {
        //Coding Part of LOGIN button
        if (e.getSource() == loginButton) {
            String userText;
            String pwdText;
            userText = userTextField.getText();
            pwdText = passwordField.getText();
            if (userText.equalsIgnoreCase("admin") && pwdText.equalsIgnoreCase("admin")) {
                JOptionPane.showMessageDialog(this, "Login Successful");
            } else {
                JOptionPane.showMessageDialog(this, "Invalid Username or Password");
            }

        }
        //Coding Part of RESET button
        if (e.getSource() == resetButton) {
            userTextField.setText("");
            passwordField.setText("");
        }
       //Coding Part of showPassword JCheckBox
        if (e.getSource() == showPassword) {
            if (showPassword.isSelected()) {
                passwordField.setEchoChar((char) 0);
            } else {
                passwordField.setEchoChar('*');
            }


        }
    }

}

/*public class logininfo {
    public static void main(String[] args) {
        LoginFrame frame = new LoginFrame();
        frame.setTitle("Login Form");
        frame.setVisible(true);
        frame.setBounds(10, 10, 370, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setResizable(false);

    }

}*/

